import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import javax.crypto.Cipher;



    class Main {
   
        public static void main(String[] args) throws Exception { // source code: https://www.quickprogrammingtips.com/java/java-asymmetric-encryption-decryption-example-with-rsa.html
            String plainText = "test";
     
            // Generate public and private keys 
            Map<String, Object> keys = getRSAKeys();
     
            PrivateKey privateKey = (PrivateKey) keys.get("private");
            PublicKey publicKey = (PublicKey) keys.get("public");
            long start1 = System.nanoTime(); // my code
            long beforeUsedMem=Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();
            String encryptedText = encryptMessage(plainText, privateKey);
            long end1 = System.nanoTime();  // my code  
            long start2 = System.nanoTime(); // my code
            String descryptedText = decryptMessage(encryptedText, publicKey);
            long end2 = System.nanoTime();  // my code
            long afterUsedMem=Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory(); 
            long actualMemUsed = afterUsedMem-beforeUsedMem;
     
            System.out.println("input:" + plainText);
            System.out.println("encrypted:" + encryptedText);
            System.out.println("decrypted:" + descryptedText + "\n");
            actualMemUsed = actualMemUsed / 1000;  
            System.out.println("Elapsed Encryption Time In Nanoseconds: "+ (end1-start1));
            System.out.println("Elapsed Decryption Time In Nanoseconds: "+ (end2-start2));
            System.out.println("Memory Used in KB: " + actualMemUsed);
     
        }
     
        // Get RSA keys. Uses key size of 2048.
        private static Map<String,Object> getRSAKeys() throws Exception {
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
            keyPairGenerator.initialize(2048);
            KeyPair keyPair = keyPairGenerator.generateKeyPair();
            PrivateKey privateKey = keyPair.getPrivate();
            PublicKey publicKey = keyPair.getPublic();
     
            Map<String, Object> keys = new HashMap<String,Object>();
            keys.put("private", privateKey);
            keys.put("public", publicKey);
            return keys;
        }
     
        // Decrypt using RSA public key
        private static String decryptMessage(String encryptedText, PublicKey publicKey) throws Exception {
            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.DECRYPT_MODE, publicKey);
            return new String(cipher.doFinal(Base64.getDecoder().decode(encryptedText)));
        }
     
        // Encrypt using RSA private key
        private static String encryptMessage(String plainText, PrivateKey privateKey) throws Exception {
            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.ENCRYPT_MODE, privateKey);
            return Base64.getEncoder().encodeToString(cipher.doFinal(plainText.getBytes()));
        }
    
    }
